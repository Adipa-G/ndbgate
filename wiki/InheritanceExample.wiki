#summary Inheritance example

= Introduction =

This demonstrates inheritance capability of the library using 3 level inheritance structure.

= Details =
===Super class===
{{{
[DbTableInfo("super_entity")]
public class SuperEntity : DefaultServerDbClass
{
    [DbColumnInfo(DbColumnType.Integer, Key = true, SubClassCommonColumn = true)]
    public int Id { get; set; }

    [DbColumnInfo(DbColumnType.Varchar)]
    public string SuperName { get; set; }

    public SuperEntity()
    {
    }
}
}}}

===Middle Class===
{{{
[DbTableInfo("middle_entity")]
public class MiddleEntity : SuperEntity
{
    [DbColumnInfo(DbColumnType.Varchar)]
    public string MiddleName { get; set; }

    public MiddleEntity()
    {
    }
}
}}}

===Base Class===
{{{
[DbTableInfo("sub_entity")]
public class SubEntity : MiddleEntity
{
    [DbColumnInfo(DbColumnType.Varchar)]
    public string SubName { get; set; }

    public SubEntity()
    {
    }
}
}}}

===Testing Class===
get the source for ExampleBase from http://code.google.com/p/ndbgate/wiki/SimpleEntityExample

{{{
public class InheritanceExample
{
    private const int Id = 43;

    public SubEntity CreateEntity()
    {
        SubEntity entity = new SubEntity();
        entity.Id = Id;
        entity.SuperName = "Super";
        entity.MiddleName = "Middle";
        entity.SubName = "Sub";
        return entity;
    }

    public void Patch(IDbConnection con)
    {
        ICollection<IServerDbClass> entities = new List<IServerDbClass>();
        entities.Add(CreateEntity());
        IDbTransaction transaction = con.BeginTransaction();
        ErLayer.GetSharedInstance().PatchDataBase(con,entities,false);
        transaction.Commit();
    }

    public void Persist(IDbConnection con, SubEntity entity)
    {
        IDbTransaction transaction = con.BeginTransaction();
        entity.Persist(con);
        transaction.Commit();
    }

    public SubEntity Retrieve(IDbConnection con)
    {
        IDbCommand cmd = con.CreateCommand();
        cmd.CommandText = "select * from sub_entity where id = ?";

        IDbDataParameter parameter = cmd.CreateParameter();
        cmd.Parameters.Add(parameter);
        parameter.DbType = DbType.Int32;
        parameter.Value = Id;

        SubEntity entity = null;
        IDataReader reader = cmd.ExecuteReader();
        if (reader.Read())
        {
            entity = new SubEntity();
            entity.Retrieve(reader, con);
        }
        DbMgmtUtility.Close(reader);
        DbMgmtUtility.Close(cmd);
        return entity;
    }

    public static void DoTest()
    {
        InheritanceExample example = new InheritanceExample();
        IDbConnection con = ExampleBase.SetupDb();
        example.Patch(con);

        SubEntity entity = example.CreateEntity();
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity Super Name = " + entity.SuperName);
        Console.WriteLine("Entity Middle Name = " + entity.MiddleName);
        Console.WriteLine("Entity Sub Name = " + entity.SubName);

        entity.SuperName = "Updated Super";
        entity.MiddleName = "Updated Middle";
        entity.SubName = "Updated Sub";
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity Super Name = " + entity.SuperName);
        Console.WriteLine("Entity Middle Name = " + entity.MiddleName);
        Console.WriteLine("Entity Sub Name = " + entity.SubName);

        entity.Status = DbClassStatus.Deleted;
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity = " + entity);

        ExampleBase.CloseDb();
    }
}
}}}