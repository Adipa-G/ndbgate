#summary Example to do basic loading and saving using the library

= Simple Example =
Example is created using SQLLite as the database engine. This demonstrates
basic features like persisting, retrieval, change tracking

= Details =
===Create the entity===
{{{
[DbTableInfo("sub_entity")]
public class SubEntity : MiddleEntity
{
    [DbColumnInfo(DbColumnType.Varchar)]
    public string SubName { get; set; }

    public SubEntity()
    {
    }
}
}}}

===Base class for examples===
{{{
public class ExampleBase
{
    public static IDbConnection SetupDb()
    {
        try
        {
            log4net.Config.XmlConfigurator.Configure(new FileInfo("log4net.config"));

            LoggerManager.GetLogger(Assembly.GetExecutingAssembly(),typeof(ExampleBase)).Log(typeof(ExampleBase),Level.Info,"Starting in-memory database for unit tests",null);
            var dbConnector = new DbConnector("Data Source=:memory:;Version=3;New=True;Pooling=True;Max Pool Size=1;foreign_keys = ON", DbConnector.DbSqllite);
            return dbConnector.Connection;
        }
        catch (Exception ex)
        {
            LoggerManager.GetLogger(Assembly.GetExecutingAssembly(), typeof(ExampleBase)).Log(typeof(ExampleBase), Level.Fatal, "Exception during database startup.", ex);
            return null;
        }
    }


    public static void CloseDb()
    {
        try
        {
            IDbConnection connection = DbConnector.GetSharedInstance().Connection;
            connection.Close();
        }
        catch (Exception ex)
        {
            LoggerManager.GetLogger(Assembly.GetExecutingAssembly(), typeof(ExampleBase)).Log(typeof(ExampleBase), Level.Fatal, "Exception during database cleanup.", ex);
        }
    }
}
}}}

===Class to do the operation===
{{{
public class SimpleExample
{
    private const int Id = 43;

    public SimpleEntity CreateEntity()
    {
        SimpleEntity entity = new SimpleEntity();
        entity.Id = Id;
        entity.Name = "Entity";
        return entity;
    }

    public void Patch(IDbConnection con)
    {
        ICollection<IServerDbClass> entities = new List<IServerDbClass>();
        entities.Add(CreateEntity());
        IDbTransaction transaction = con.BeginTransaction();
        ErLayer.GetSharedInstance().PatchDataBase(con,entities,false);
        transaction.Commit();
    }

    public void Persist(IDbConnection con,SimpleEntity entity)
    {
        IDbTransaction transaction = con.BeginTransaction();
        entity.Persist(con);
        transaction.Commit();
    }

    public SimpleEntity Retrieve(IDbConnection con)
    {
        IDbCommand cmd = con.CreateCommand();
        cmd.CommandText = "select * from simple_entity where id = ?";

        IDbDataParameter parameter = cmd.CreateParameter();
        cmd.Parameters.Add(parameter);
        parameter.DbType = DbType.Int32;
        parameter.Value = Id;

        SimpleEntity entity = null;
        IDataReader reader = cmd.ExecuteReader();
        if (reader.Read())
        {
            entity = new SimpleEntity();
            entity.Retrieve(reader, con);
        }
        DbMgmtUtility.Close(reader);
        DbMgmtUtility.Close(cmd);
        return entity;
    }

    public static void DoTest()
    {
        SimpleExample example = new SimpleExample();
        IDbConnection con = ExampleBase.SetupDb();
        example.Patch(con);

        SimpleEntity entity = example.CreateEntity();
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity Name = " + entity.Name);

        entity.Name = "Updated";
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity Name = " + entity.Name);

        entity.Status = DbClassStatus.Deleted;
        example.Persist(con, entity);

        entity = example.Retrieve(con);
        Console.WriteLine("Entity = " + entity);

        ExampleBase.CloseDb();
    }
}
}}}
