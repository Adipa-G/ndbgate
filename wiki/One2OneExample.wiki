#summary One to One relationship example

= Introduction =

This demonstrates one to one relationship capability of the library using 2 types of different child objects.

= Details =
==Parent class==
{{{
@DBTableInfo(tableName = "parent_entity")
public class One2OneParentEntity extends DefaultServerDBClass
{
    @DBColumnInfo(columnType = DBColumnType.INTEGER,key = true)
    private int id;
    @DBColumnInfo(columnType = DBColumnType.VARCHAR)
    private String name;
    @ForeignKeyInfoList(infoList = {
        @ForeignKeyInfo(name = "parent2childA"
                    ,relatedObjectType = One2OneChildEntityA.class
                    ,updateRule = ReferentialRuleType.RESTRICT
                    ,deleteRule = ReferentialRuleType.CASCADE
                    ,columnMappings =  {@ForeignKeyColumnMapping(fromField = "id",toField = "parentId")})
        ,
        @ForeignKeyInfo(name = "parent2childB"
                    ,relatedObjectType = One2OneChildEntityB.class
                    ,updateRule = ReferentialRuleType.RESTRICT
                    ,deleteRule = ReferentialRuleType.CASCADE
                    ,columnMappings =  {@ForeignKeyColumnMapping(fromField = "id",toField = "parentId")})
    })
    private One2OneChildEntity childEntity;

    public One2OneParentEntity()
    {
    }

    public int getId()
    {
        return id;
    }

    public void setId(int id)
    {
        this.id = id;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public One2OneChildEntity getChildEntity()
    {
        return childEntity;
    }

    public void setChildEntity(One2OneChildEntity one2OneChildEntity)
    {
        this.childEntity = one2OneChildEntity;
    }
}
}}}

==Child Base Class==
{{{
public abstract class One2OneChildEntity extends DefaultServerDBClass
{
    public abstract String getName();

    public abstract void setName(String name);
}
}}}

==Child Sub Class 1==
{{{
@DBTableInfo(tableName = "child_entity_a")
public class One2OneChildEntityA extends One2OneChildEntity
{
    @DBColumnInfo(columnType = DBColumnType.INTEGER,key = true)
    private int parentId;
    @DBColumnInfo(columnType = DBColumnType.VARCHAR)
    private String name;


    public int getParentId()
    {
        return parentId;
    }

    public void setParentId(int parentId)
    {
        this.parentId = parentId;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}
}}}

==Child Sub Class 2==
{{{
@DBTableInfo(tableName = "child_entity_b")
public class One2OneChildEntityB extends One2OneChildEntity
{
    @DBColumnInfo(columnType = DBColumnType.INTEGER,key = true)
    private int parentId;
    @DBColumnInfo(columnType = DBColumnType.VARCHAR)
    private String name;


    public int getParentId()
    {
        return parentId;
    }

    public void setParentId(int parentId)
    {
        this.parentId = parentId;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}
}}}

==Testing Class==
get the source for ExampleBase from http://code.google.com/p/dbgate/wiki/SimpleEntityExample

{{{
public class One2OneExample extends ExampleBase
{
    private static int idA = 43;
    private static int idB = 44;

    public One2OneParentEntity createEntityWithChildA()
    {
        One2OneParentEntity entity = new One2OneParentEntity();
        entity.setId(idA);
        entity.setName("Parent");

        entity.setChildEntity(new One2OneChildEntityA());
        entity.getChildEntity().setName("Child A");

        return entity;
    }

    public One2OneParentEntity createEntityWithChildB()
    {
        One2OneParentEntity entity = new One2OneParentEntity();
        entity.setId(idB);
        entity.setName("Parent");

        entity.setChildEntity(new One2OneChildEntityB());
        entity.getChildEntity().setName("Child B");

        return entity;
    }

    public void patch() throws DBPatchingException, SQLException
    {
        Connection con = connector.getConnection();
        Collection<ServerDBClass> entities = new ArrayList<ServerDBClass>();
        entities.add(createEntityWithChildA());
        entities.add(new One2OneChildEntityA());
        entities.add(new One2OneChildEntityB());
        ERLayer.getSharedInstance().patchDataBase(con,entities,false);
        con.commit();
        DBMgmtUtility.close(con);
    }

    public void persistWithA() throws PersistException, SQLException
    {
        Connection con = connector.getConnection();
        One2OneParentEntity entity = createEntityWithChildA();
        entity.persist(con);
        con.commit();
        DBMgmtUtility.close(con);
    }

    public void persistWithB() throws PersistException, SQLException
    {
        Connection con = connector.getConnection();
        One2OneParentEntity entity = createEntityWithChildB();
        entity.persist(con);
        con.commit();
        DBMgmtUtility.close(con);
    }

    public One2OneParentEntity retrieve(int id) throws SQLException,RetrievalException
    {
        Connection con = connector.getConnection();
        PreparedStatement ps = con.prepareStatement("select * from parent_entity where id = ?");
        ps.setInt(1, id);
        ResultSet rs = ps.executeQuery();
        One2OneParentEntity entity = null;
        if (rs.next())
        {
            entity = new One2OneParentEntity();
            entity.retrieve(rs,con);
        }
        DBMgmtUtility.close(rs);
        DBMgmtUtility.close(ps);
        DBMgmtUtility.close(con);
        return entity;
    }

    public static void main(String[] args)
    {
        One2OneExample inheritanceExample = new One2OneExample();
        inheritanceExample.initializeConnector();
        try
        {
            inheritanceExample.patch();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        try
        {
            inheritanceExample.persistWithA();
            inheritanceExample.persistWithB();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        try
        {
            One2OneParentEntity entity = inheritanceExample.retrieve(idA);
            System.out.println("entityA.Name() = " + entity.getName());
            System.out.println("entityA.ChildName() = " + entity.getChildEntity().getName());

            entity = inheritanceExample.retrieve(idB);
            System.out.println("entityB.Name() = " + entity.getName());
            System.out.println("entityB.ChildName() = " + entity.getChildEntity().getName());
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        inheritanceExample.destroyConnector();
    }
}
}}}