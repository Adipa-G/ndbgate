#summary Feature Integration example

= Introduction =

This demonstrates no of features working together, with reverse relationships and non-identifying relationships.

= Details =
===Item class===
{{{
[DbTableInfo("product_item")]
public abstract class Item : DefaultServerDbClass
{
    [DbColumnInfo(DbColumnType.Integer, Key = true, SubClassCommonColumn = true)]
    public int ItemId { get; set; }
    [DbColumnInfo(DbColumnType.Varchar)]
    public string Name { get; set; }

    protected Item()
    {
    }
}
}}}

===Product Class===
{{{
[DbTableInfo("product_product")]
public class Product : dbgatetestapp.dbgate.complexexample.entities.product.Item
{
    [DbColumnInfo(DbColumnType.Double)]
    public double UnitPrice { get; set; }

    [DbColumnInfo(DbColumnType.Double,Nullable = true)]
    public double? BulkUnitPrice { get; set; }
}
}}}

===Service Class===
{{{
[DbTableInfo("product_service")]
public class Service : Item
{
    [DbColumnInfo(DbColumnType.Double)]
    public double HourlyRate { get; set; }
}
}}}

===Transaction Class===
{{{
[DbTableInfo("order_transaction")]
public class Transaction : DefaultServerDbClass
{
    [DbColumnInfo(DbColumnType.Integer,Key = true)]
    public int TransactionId { get; set; }
    [DbColumnInfo(DbColumnType.Varchar)]
    public string Name { get; set; }

    [ForeignKeyInfo("tx2item_tx", typeof(dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction), new string[] { "transactionId" },new string[] { "transactionId"}
        , UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public ICollection<dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction> ItemTransactions { get; set; }

    public Transaction()
    {
        ItemTransactions = new List<dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction>();
    }
}
}}}

===ItemTransaction Class===
{{{
[DbTableInfo("order_item_transaction")]
public class ItemTransaction  : DefaultServerDbClass
{
    [DbColumnInfo(DbColumnType.Integer,Key = true)]
    public int TransactionId { get; set; }
    [DbColumnInfo(DbColumnType.Integer,Key = true)]
    public int IndexNo { get; set; }
    [DbColumnInfo(DbColumnType.Integer)]
    public int ItemId { get; set; }

    [ForeignKeyInfo("item_tx2product", typeof (Product), new string[] {"itemId"}, new string[] {"itemId"}
        , NonIdentifyingRelation = true, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    [ForeignKeyInfo("item_tx2service", typeof (Service), new string[] {"itemId"}, new string[] {"itemId"}
        , NonIdentifyingRelation = true, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public Item Item { get; set; }

    [ForeignKeyInfo("item_tx2tx_rev", typeof (Transaction), new string[] {"transactionId"},new string[] {"transactionId"}
        , ReverseRelation = true, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public Transaction Transaction { get; set; }

    [ForeignKeyInfo("item_tx2tx_chg", typeof(ItemTransactionCharge), new string[] { "transactionId", "indexNo" },
        new string[] { "transactionId", "indexNo" }, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public ICollection<ItemTransactionCharge> ItemTransactionCharges { get; set; }

    public ItemTransaction(Transaction transaction)
    {
        this.Transaction = transaction;
        ItemTransactionCharges = new List<ItemTransactionCharge>();
    }

    public ItemTransaction()
    {
        ItemTransactionCharges = new List<ItemTransactionCharge>();
    }
}
}}}

===ItemTransactionCharge Class===
{{{
[DbTableInfo("order_item_transaction_charge")]
public class ItemTransactionCharge  : DefaultServerDbClass
{
    [DbColumnInfo(DbColumnType.Integer, Key = true)]
    public int TransactionId { get; set; }
    [DbColumnInfo(DbColumnType.Integer, Key = true)]
    public int IndexNo { get; set; }
    [DbColumnInfo(DbColumnType.Integer, Key = true)]
    public int ChargeIndex { get; set; }
    [DbColumnInfo(DbColumnType.Varchar)]
    public string ChargeCode { get; set; }

    [ForeignKeyInfo("item_tx_charge2tx_rev", typeof (Transaction), new string[] {"transactionId"},new string[] {"transactionId"}
        , ReverseRelation = true, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public Transaction Transaction { get; set; }

    [ForeignKeyInfo("item_tx_charge2tx_item_rev", typeof (dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction), new string[] {"transactionId","indexNo"},new string[] {"transactionId","indexNo"}
        , ReverseRelation = true, UpdateRule = ReferentialRuleType.Restrict, DeleteRule = ReferentialRuleType.Cascade)]
    public dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction ItemTransaction { get; set; }

    public ItemTransactionCharge()
    {
    }

    public ItemTransactionCharge(dbgatetestapp.dbgate.complexexample.entities.order.ItemTransaction itemTransaction)
    {
        this.ItemTransaction = itemTransaction;
        this.Transaction = itemTransaction.Transaction;
    }
}
}}}

===Testing Class===
get the source for ExampleBase from http://code.google.com/p/ndbgate/wiki/SimpleEntityExample

{{{
public class ComplexExample
{
    public const int ProductId = 43;
    public const int ServiceId = 63;
    public const int TransactionId = 1243;

    public Product CreateDefaultProduct(IDbConnection con)
    {
        Product product = new Product();
        product.ItemId = ProductId;
        product.Name = "Product";
        product.UnitPrice = 54;
        IDbTransaction transaction = con.BeginTransaction();
        product.Persist(con);
        transaction.Commit();
        return product;
    }

    public Service CreateDefaultService(IDbConnection con)
    {
        Service service = new Service();
        service.ItemId = ServiceId;
        service.Name = "Service";
        service.HourlyRate = 65;
        IDbTransaction transaction = con.BeginTransaction();
        service.Persist(con);
        transaction.Commit();
        return service;
    }

    public Transaction CreateDefaultTransaction(IDbConnection con, Product product, Service service)
    {
        Transaction transaction = new Transaction();
        transaction.TransactionId = TransactionId;
        transaction.Name = "TRS-0001";

        ItemTransaction productTransaction = new ItemTransaction(transaction);
        productTransaction.IndexNo = 0;
        productTransaction.Item = product;
        transaction.ItemTransactions.Add(productTransaction);

        ItemTransactionCharge productTransactionCharge = new ItemTransactionCharge(productTransaction);
        productTransactionCharge.ChargeCode = "Product-Sell-Code";
        productTransaction.ItemTransactionCharges.Add(productTransactionCharge);

        ItemTransaction serviceTransaction = new ItemTransaction(transaction);
        serviceTransaction.IndexNo = 1;
        serviceTransaction.Item = service;
        transaction.ItemTransactions.Add(serviceTransaction);

        ItemTransactionCharge serviceTransactionCharge = new ItemTransactionCharge(serviceTransaction);
        serviceTransactionCharge.ChargeCode = "Service-Sell-Code";
        serviceTransaction.ItemTransactionCharges.Add(serviceTransactionCharge);

        IDbTransaction dbTransaction = con.BeginTransaction();
        transaction.Persist(con);
        dbTransaction.Commit();
        return transaction;
    }

    public void Patch(IDbConnection con)
    {
        ICollection<IServerDbClass> entities = new List<IServerDbClass>();
        entities.Add(new Product());
        entities.Add(new Service());
        entities.Add(new Transaction());
        entities.Add(new ItemTransaction());
        entities.Add(new ItemTransactionCharge());
        IDbTransaction transaction = con.BeginTransaction();
        ErLayer.GetSharedInstance().PatchDataBase(con,entities,false);
        transaction.Commit();
    }

    public void Persist(IDbConnection con, IServerDbClass entity)
    {
        IDbTransaction transaction = con.BeginTransaction();
        entity.Persist(con);
        transaction.Commit();
    }

    public Transaction Retrieve(IDbConnection con)
    {
        IDbCommand cmd = con.CreateCommand();
        cmd.CommandText = "select * from order_transaction where transaction_id = ?";

        IDbDataParameter parameter = cmd.CreateParameter();
        cmd.Parameters.Add(parameter);
        parameter.DbType = DbType.Int32;
        parameter.Value = TransactionId;

        Transaction entity = null;
        IDataReader reader = cmd.ExecuteReader();
        if (reader.Read())
        {
            entity = new Transaction();
            entity.Retrieve(reader, con);
        }
        DbMgmtUtility.Close(reader);
        DbMgmtUtility.Close(cmd);
        return entity;
    }

    public static void DoTest()
    {
        ComplexExample example = new ComplexExample();
        IDbConnection con = ExampleBase.SetupDb();
        example.Patch(con);

        Product product = example.CreateDefaultProduct(con);
        example.Persist(con,product);

        Service service = example.CreateDefaultService(con);
        example.Persist(con, service);

        Transaction transaction = example.CreateDefaultTransaction(con,product,service);
        example.Persist(con, transaction);

        transaction = example.Retrieve(con);
        Console.WriteLine("Transaction Name = " + transaction.Name);
        foreach (ItemTransaction itemTransaction in transaction.ItemTransactions)
        {
            Console.WriteLine("Item Name = " + itemTransaction.Item.Name);
        }
        ExampleBase.CloseDb();
    }
}
}}}